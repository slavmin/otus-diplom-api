name: Deployment

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      rollback:
        description: 'Rollback to previous version?'
        required: false
        default: 'false'

permissions:
  contents: write
  checks: write
  pull-requests: write

jobs:
  call-linter:
    uses: ./.github/workflows/lint.yml
  call-tests:
    uses: ./.github/workflows/tests.yml

  setup:
    runs-on: ubuntu-latest
    needs: [ call-linter, call-tests ]
    outputs:
      temp_dir: ${{ steps.setvars.outputs.temp_dir }}
      release_dir: ${{ steps.setvars.outputs.release_dir }}
      target_dir: ${{ steps.setvars.outputs.target_dir }}
    steps:
      - name: Set deployment variables
        id: setvars
        run: |
          RELEASE_DIR="/var/www/back/releases/$(date +%Y%m%d%H%M%S)"
          echo "temp_dir=/var/www/tmp/back/app" >> $GITHUB_OUTPUT
          echo "release_dir=$RELEASE_DIR" >> $GITHUB_OUTPUT
          echo "target_dir=/var/www/back/current" >> $GITHUB_OUTPUT

  deploy:
    runs-on: ubuntu-latest
    needs: setup
    if: github.event.inputs.rollback == 'false'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Upload files via SSH (debug version)
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "*"
          target: ${{ needs.setup.outputs.temp_dir }}
          # Remove strip_components to debug
          overwrite: true
          rm: true
        timeout-minutes: 5

      - name: Verify files were uploaded
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            TEMP_DIR="${{ needs.setup.outputs.temp_dir }}"
            echo "Contents of temp dir:"
            ls -la $TEMP_DIR || echo "Temp directory does not exist"
            [ "$(ls -A $TEMP_DIR)" ] || { echo "Temp directory is empty!"; exit 1; }

      - name: Run deployment commands
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            TEMP_DIR="${{ needs.setup.outputs.temp_dir }}"
            RELEASE_DIR="${{ needs.setup.outputs.release_dir }}"
            TARGET_DIR="${{ needs.setup.outputs.target_dir }}"

            # Create release directory
            mkdir -p $RELEASE_DIR || exit 1
            echo "Created release directory at $RELEASE_DIR"

            # Copy files from target dir
            if [ -d "$TARGET_DIR" ]; then
              echo "Copying existing files from $TARGET_DIR to $RELEASE_DIR"
              cp -a "$TARGET_DIR"/. "$RELEASE_DIR/" || exit 1
              echo "Existing files (including .env) copied"
            else
              echo "Notice: No existing deployment found (first deploy?)"
            fi

            # Copy files from temp dir with verification
            echo "Copying files from $TEMP_DIR to $RELEASE_DIR"
            cp -Rv $TEMP_DIR/. $RELEASE_DIR/ || exit 1
            echo "Copied files successfully"

            # Verify files in release directory
            echo "Contents of release dir:"
            ls -la $RELEASE_DIR || exit 1
            [ "$(ls -A $RELEASE_DIR)" ] || { echo "Release directory is empty!"; exit 1; }

#            # Install dependencies and optimize
#            cd $RELEASE_DIR
#            composer install --optimize-autoloader --no-dev
#            php artisan optimize:clear && php artisan optimize
#            echo "Installed dependencies"

            # Update symlink atomically
            ln -sfn "$RELEASE_DIR" "${TARGET_DIR}.tmp" && mv -fT "${TARGET_DIR}.tmp" "$TARGET_DIR"
            echo "Updated symlink to point $TARGET_DIR to $RELEASE_DIR"

            # Cleanup (uncomment when working)
            rm -rf $TEMP_DIR/.
            echo "Cleaned up temp directory"

  rollback:
    runs-on: ubuntu-latest
    needs: setup
    if: github.event.inputs.rollback == 'true'

    steps:
      - name: Use variables
        run: |
          echo "Temp dir: ${{ needs.setup.outputs.temp_dir }}"
          echo "Release dir: ${{ needs.setup.outputs.release_dir }}"
          echo "Target dir: ${{ needs.setup.outputs.target_dir }}"

      - name: Rollback to previous version
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            RELEASE_DIR="${{ needs.setup.outputs.release_dir }}"
            TARGET_DIR="${{ needs.setup.outputs.target_dir }}"

            cd $RELEASE_DIR
            PREVIOUS_RELEASE=$(ls -t | head -n 2 | tail -n 1)
            if [ -z "$PREVIOUS_RELEASE" ]; then
              echo "No previous release found"
              exit 1
            fi
            ln -sfn $RELEASE_DIR/$PREVIOUS_RELEASE $TARGET_DIR
            echo "Rolled back to $PREVIOUS_RELEASE"
